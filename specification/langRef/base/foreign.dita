<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE reference PUBLIC "-//OASIS//DTD DITA Reference//EN" "reference.dtd">
<reference id="foreign" xml:lang="en-us">
<title><xmlelement>foreign</xmlelement></title>
<shortdesc>The <xmlelement>foreign</xmlelement> element allows the introduction of non-DITA content,
    such as MathML, SVG, or Rich Text Format (RTF).</shortdesc>
<prolog><metadata>
<keywords>
        <indexterm>specialization
          elements<indexterm><xmlelement>foreign</xmlelement></indexterm></indexterm><indexterm>foreign vocabularies, including</indexterm>
</keywords>
</metadata></prolog>
<refbody>
    <section id="usage-information">
      <title>Usage information</title>
      <p>The <xmlelement>foreign</xmlelement> element or a specialization can contain more than one
        type of non-DITA content or a mix of DITA and non-DITA content. Specialization of the
          <xmlelement>foreign</xmlelement> element is typically implemented as a domain, but it is
        also possible to implement foreign vocabularies as structural specializations.</p>
      <p>If alternate content is desired, use or specialize the <xmlelement>desc</xmlelement>
        element inside of the <xmlelement>foreign</xmlelement> specialization. Such alternate
        content needs to be valid wherever the <xmlelement>foreign</xmlelement> specialization is
        valid. This way, if a processor is not able to recognize or render the
          <xmlelement>foreign</xmlelement> content itself, it can use the alternate content from
          <xmlelement>desc</xmlelement>.</p>
    </section>
    <section id="processing-expectations">
      <title>Processing expectations</title>
      <p>Processors should attempt to display <xmlelement>foreign</xmlelement> content unless
        otherwise instructed. If the processor cannot render the content, it <term
          outputclass="RFC-2119">MAY</term> issue a warning.</p>
      <p>The enabler of the foreign vocabulary must provide the processing and override the base
        processing for <xmlelement>foreign</xmlelement>. </p>
      <ul id="ul_f2h_3kf_bbb">
        <li>If <xmlelement>foreign</xmlelement> contains more than one alternative content element,
          they should all be processed. In the case of <xmlelement>desc</xmlelement> they should be
          concatenated in a similar way to <xmlelement>section</xmlelement>, but with no title
          (analogous to <xmlelement>div</xmlelement> in HTML). </li>
        <li> If no <xmlelement>desc</xmlelement>, <xmlelement>object</xmlelement>, or
            <xmlelement>image</xmlelement> element is found within an instance of the
            <xmlelement>foreign</xmlelement> element, the base processing can emit a warning about
          the absence of processable content.</li>
        <li>The base processing for <xmlelement>object</xmlelement> might emit the content of
            <xmlelement>foreign</xmlelement> as a file at the location specified by the
            <xmlatt>data</xmlatt> attribute of the <xmlelement>object</xmlelement> element. The
            <xmlelement>object</xmlelement> element should have a data attribute or a
            <xmlelement>foreign</xmlelement> sub-element but not both. In the event that an
            <xmlelement>object</xmlelement> element contains both a data attribute and an
            <xmlelement>foreign</xmlelement> sub-element the processing system should ignore one of
          them.</li>
      </ul>
    </section>
    <section id="attributes">
      <title>Attributes</title>
      <p conkeyref="reuse-attributes/only-universal"/>
    </section>
<example id="example" otherprops="examples">       <title>Example</title>
      <p>The following code sample shows a specialization of <xmlelement>foreign</xmlelement> used
        to hold SVG elements. For this to work, the specialization module that defines
          <xmlelement>svg</xmlelement> also needs to include definitions for the SVG elements.</p><codeblock>&lt;p&gt;... as in the formula 
  &lt;svg&gt;
    &lt;svg:svg width="100%" height="100%" version="1.1"
xmlns="http://www.w3.org/2000/svg"&gt;

&lt;ellipse cx="300" cy="150" rx="200" ry="80"
style="fill:rgb(200,100,50);
stroke:rgb(0,0,100);stroke-width:2"/&gt;

    &lt;/svg:svg&gt;    
  &lt;/svg&gt;.
&lt;/p&gt; </codeblock>     </example>
</refbody>
</reference>
