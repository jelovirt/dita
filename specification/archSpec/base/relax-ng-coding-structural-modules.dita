<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="relax-ng-structural-module-coding-requirements">
  <title>RELAX NG: Coding requirements for structural modules</title>
  <shortdesc>A structural vocabulary module defines a new topic or map type as a specialization of a
    topic or map type.</shortdesc>
  <conbody>
    <section id="architectural-attributes">
      <title>Required topic and map element attributes</title>
      <p>The topic or map element type references the <codeph>arch-atts</codeph> pattern, which
        defines the <xmlatt>DITAArchVersion</xmlatt> attribute in the DITA architecture namespace
        and sets the attribute to the version of DITA. In addition, the topic or map element type
        references the <codeph>specializations-att</codeph> pattern, which pulls in a definition for
        the <xmlatt>specializations</xmlatt> attribute.</p>
      <div otherprops="examples">
        <p>For example, the following definition references the <codeph>arch-atts</codeph> and
            <codeph>specializations-att</codeph> patterns as part of the definition for the
            <xmlelement>concept</xmlelement> element.</p>
        <codeblock>&lt;div&gt;
  &lt;a:documentation&gt; LONG NAME: Concept &lt;/a:documentation&gt;
  &lt;!-- ... -->
  &lt;define name="concept.attlist" combine="interleave"&gt;
    &lt;ref name="concept.attributes"/&gt;
    &lt;ref name="arch-atts"/&gt;
    &lt;ref name="specializations-att"/&gt;
  &lt;/define&gt;
  &lt;!-- ... -->
&lt;/div>
</codeblock>
      </div>
      <p>The <xmlatt>DITAArchVersion</xmlatt> and <xmlatt>specialization</xmlatt> attributes give
        processors a reliable way to check the DITA version and the attribute domains that are
        used.</p>
    </section>
    <section id="topic-nesting">
      <title>Controlling nesting in topic types</title>
      <p>Specialized topics typically define an <codeph>info-types</codeph> style pattern to specify
        default topic nesting. Document-type shells then can control how topics are allowed to nest
        by redefining the pattern. While there are known exceptions described below, the following
        rules apply when using a pattern to control topic nesting.</p>
      <draft-comment author="Kristen J Eberlein" time="07 April 2021">
        <p>What are the exceptions, and are they indeed described below?</p>
      </draft-comment>
      <dl>
        <dlentry>
          <dt>Pattern name</dt>
          <dd>
            <p>The pattern name is the topic element name plus the suffix
                <codeph>-info-types</codeph>.</p>
            <p otherprops="examples">For example, the info-types pattern for the concept topic type
              is <codeph>concept-info-types</codeph>.</p>
          </dd>
        </dlentry>
        <dlentry>
          <dt>Pattern value</dt>
          <dd>
            <p>To set up default topic-nesting rules, set the pattern to the desired topic elements.
              The default topic nesting is used when a document-type shell does not set up different
              rules.</p>
            <div otherprops="examples">
              <p>For example:</p>
              <codeblock>&lt;div>
  &lt;a:documentation>INFO TYPES PATTERNS&lt;/a:documentation>
  &lt;define name="mytopic-info-types">
    &lt;ref name="subtopictype-01.element"/>
    &lt;ref name="subtopictype-02.element"/>
  &lt;/define>
  &lt;!-- ... -->
&lt;/div></codeblock>
            </div>
            <p>To disable topic nesting, specify the <xmlelement>empty</xmlelement> element.</p>
            <div otherprops="examples">
              <p>For example:</p>
              <codeblock>&lt;define name="learningAssessment-info-types"&gt;
  &lt;empty/&gt;
&lt;/define&gt;</codeblock>
            </div>
            <p>The <codeph>info-types</codeph> pattern also can be used to refer to common nesting
              rules across the document-type shell.</p>
            <draft-comment author="Kristen J Eberlein" time="07 April 2021">
              <p>What does the above sentence mean?</p>
            </draft-comment>
            <div otherprops="examples">
              <p>For example:</p>
              <codeblock>&lt;div>
  &lt;a:documentation>INFO TYPES PATTERNS&lt;/a:documentation>
  &lt;define name="mytopic-info-types">
    &lt;ref name="info-types"/>
  &lt;/define>
  &lt;!-- ... -->
&lt;/div></codeblock>
            </div>
          </dd>
        </dlentry>
        <dlentry>
          <dt>Content model of the root element</dt>
          <dd>
            <p>In the declaration of the root element of a topic type, the last position in the
              content model is the <codeph><varname>topictype</varname>-info-types</codeph>
              pattern.</p>
            <div otherprops="examples">
              <p>For example, the <xmlelement>concept</xmlelement> element places the pattern after
                  <xmlelement>related-links</xmlelement>:</p>
              <codeblock>&lt;div>
  &lt;a:documentation>LONG NAME: Concept&lt;/a:documentation>
  &lt;define name="concept.content">
    &lt;!-- ... -->
    &lt;optional>
      &lt;ref name="related-links"/>
    &lt;/optional>
    &lt;zeroOrMore>
      &lt;ref name="concept-info-types"/>
    &lt;/zeroOrMore>
  &lt;/define>
&lt;/div></codeblock>
            </div>
          </dd>
        </dlentry>
      </dl>
      <p>In certain cases, you do not need to use the <codeph>info-types</codeph> pattern to control
        topic nesting:</p>
      <ul>
        <li>If a topic type will never permit topic nesting, regardless of context, it can be
          defined without any pattern or any nested topics.</li>
        <li>If a topic type will only allow specific nesting patterns, such as allowing only other
          topic types that are defined in the same module, it can nest those topics directly in the
          same way that other nested elements are defined.</li>
      </ul>
      <draft-comment author="Kristen J Eberlein" time="07 April 2021">
        <p>Examples? I think the wording needs to be crisped up.</p>
      </draft-comment>
    </section>
  </conbody>
</concept>
