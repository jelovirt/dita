<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept_wf2_3sb_lq">
 <title><ph >Processing conrefs</ph></title>
 <shortdesc >When processing content references, DITA processors compare the
  restrictions of each context to ensure that the conrefed content is valid in its new
  context.</shortdesc>
 <prolog>
  <metadata>
   <keywords>
    <indexterm>conref<indexterm>processing expectations</indexterm><indexterm>validity
      of</indexterm></indexterm>
    <indexterm>generalization<indexterm>conref resolution</indexterm></indexterm>
    <indexterm>processing<indexterm>conrefs</indexterm></indexterm>
    <indexterm>processing expectations<indexterm>conrefs, validity
      of</indexterm><indexterm>generalization during conref resolution</indexterm></indexterm>
   </keywords>
  </metadata>
 </prolog>
 <conbody>
  <note>The DITA <xmlatt>conref</xmlatt> attribute is a transclusion mechanism similar to XInclude
   and to HyTime value references. DITA differs from these mechanisms, however, in that conref
   validity does not apply simply to the current content at the time of replacement, but to the
   possible content given the restrictions of both the referencing document type and the referenced
   document type.</note>
   <p>When content is reused between two documents with different domains or constraints, it is
      possible for the reused content to include domain extensions that are not defined for the new
      context, or to include elements that would be constrained out of the new context. When pulling
      or pushing content with the conref mechanism, processors resolving conrefs <term
        outputclass="RFC-2119">SHOULD</term> tolerate specializations of valid elements. Processors
        <term outputclass="RFC-2119">MAY</term> generalize elements in the pushed or pulled content
      fragment as needed for the resolving context.</p>
    <draft-comment author="robander">Without @domains, without constraints, and without a built-in
      knowledge of every document type, it is not be possible to determine every case that could be
      rendered invalid. As such, should we change the following MUST NOT to SHOULD
      NOT?</draft-comment>
  <p>A conref processor <term outputclass="RFC-2119">MUST NOT</term> permit resolution of a reuse
      relationship that could be rendered invalid under the rules of either the reused or reusing
      content.</p>
 </conbody>
</concept>
