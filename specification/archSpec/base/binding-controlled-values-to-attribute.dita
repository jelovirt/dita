<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept_fpj_jlx_54">
 <title>Binding controlled values to an attribute</title>
 <shortdesc> The controlled values defined in a subject scheme map can be bound to an attribute or
        an element and attribute pair. This <ph >affects</ph> the expected
        behavior for processors and authoring tools.</shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm>binding controlled values</indexterm>
                <indexterm>controlled values<indexterm>binding to
                        attributes</indexterm><indexterm>precedence
                        rules</indexterm><indexterm>validation of</indexterm></indexterm>
                <indexterm><xmlatt>deliveryTarget</xmlatt><indexterm>defining values
                    for</indexterm></indexterm>
                <indexterm>examples<indexterm>subjectScheme<indexterm>binding controlled
                            values</indexterm></indexterm></indexterm>
                <indexterm>precedence rules<indexterm>controlled values</indexterm></indexterm>
                <indexterm>processing expectations<indexterm>validating controlled
                        values</indexterm></indexterm>
                <indexterm>subjectScheme<indexterm>binding controlled
                            values</indexterm><indexterm>examples<indexterm>binding controlled
                            values</indexterm></indexterm></indexterm>
                <indexterm>validating controlled values</indexterm>
            </keywords>
        </metadata>
    </prolog>
 <conbody>
        <p>The <xmlelement>enumerationdef</xmlelement> element binds the set of controlled values to
            an attribute. Valid attribute values are those that are defined in the set of controlled
            values; invalid attribute values are those that are not defined in the set of controlled
            values. An enumeration can specify an empty <xmlelement>subjectdef</xmlelement> element.
            In that case, no value is valid for the attribute. An enumeration also can specify an
            optional default value by using the <xmlelement>defaultSubject</xmlelement> element.</p>
        <p>If an enumeration is bound, processors <term outputclass="RFC-2119">SHOULD</term>
            validate attribute values against the controlled values that are defined in the subject
            scheme map. For authoring tools, this validation prevents users from entering misspelled
            or undefined values. Recovery from validation errors is implementation specific.</p>
        <p>The default attribute values that are specified in a subject scheme map apply only if a
            value is not otherwise specified in the DITA source or as a default value by the XML
            grammar. </p>
        <p >To determine the effective value for a DITA attribute, processors
            check for the following in the order outlined:</p>
        <ol>
            <li>An explicit value in the element instance</li>
            <li>A default value in the XML grammar</li>
            <li>Cascaded value within the document</li>
            <li>Cascaded value from a higher level document to the document</li>
            <li>A default controlled value, as specified in the
                    <xmlelement>defaultSubject</xmlelement> element </li>
            <li>A value set by processing rules</li>
        </ol>
        <draft-comment author="Kristen J Eberlein" time="15 May 2019" audience="spec-editors">
            <p>Should the above statement be normative? Discussed at TC call on 28 May 2019.
Notes:</p>
<lines>Kris: Let's move on to a review of draft comments
Robert (scrolls to first draft-comment in spec draft, page 37, section 3.3.3)
Kris: Should this be normative?
Eliot: Either it should be stated in a direct way, in terms of the precedence of the source of the value rather than how a processor might work, that is the processing should be implicit in the rules. But if this behavior is already implicit in the rules than there should be a non-normative note (if it's here at all).
Kris: I don't know whether what we're stating here is already normatively stated in how our processes handle values for DITA attributes.
Robert: I don't think this is stated elsewhere.
Robert: So Eliot what you're saying is this intro clause should be something like "The effective value for a DITA attribute IS..."
Eliot: Yes, it should be declarative not procedural
Kris: So we need to change the introductory sentence
Eliot: I have a concern, which is that this also affects cascading values of attributes in maps. We need to be careful we're not restating this rule.
Eliot: Also in this list, items 1&amp;2 come from XML behavior, it's not until #3 that we get to things that are needed for DITA
Robert: The editors need to make sure this content is not duplicated. We can't just delete it because we lose the part about <xmlelement>defaultSubject</xmlelement>
Eliot: The list altogether is good, but perhaps there needs to be another statement that says that these rules apply when cascading is needed.
Kris: This was something we introduced in DITA 1.3.
Eliot: I think the previous paragraph "The default attribute values ..." could maybe be the normative statement
Robert: That's probably correct
Eliot: Then what follows is a nice explanatory note
ACTION: Kris and Robert to revise this content and run it by Eliot</lines>
        </draft-comment>
        <!--<section><title>Binding multiple categories to a single attribute</title><p>Multiple categories can be bound to single attribute, such as @otherprops to allow for additional sets of controlled values beyond those allowed by the standard conditional processing attributes.<codeblock>&lt;subjectScheme>
    &lt;subjectdef keys="users">
        &lt;subjectdef keys="therapist">
        &lt;subjectdef keys="oncologist">
        &lt;subjectdef keys="physicist">
        &lt;subjectdef keys="radiologist">
    &lt;/subjectdef>
    &lt;subjectdef keys="machinetypes">
         &lt;topicmeta>&lt;navtitle>Types of machinery&lt;/navtitle>&lt;/topicmeta>
         &lt;subjectdef keys="large">
         &lt;subjectdef keys="small">
    &lt;/subjectdef>
    &lt;enumerationdef>
        &lt;attributedef name="audience"/>
        &lt;subjectdef keyref="users"/>
    &lt;/enumerationdef>
    &lt;enumerationdef>
        &lt;attributedef name="otherprops">
        &lt;subjectdef keyref="machinetypes">
    &lt;/enumerationdef>
    &lt;/subjectScheme></codeblock></p><p>When an attribute is bound to multiple enumerations, DITA processing determines exclusion for filtering based on the enumeration category rather than on the attribute. <draft-comment>Su-Laine: Is concerned about the use of a single conditional attribute for multiple meanings because both the map and a processor must be aware of this feature. Could also result in incorrect filtering in cases where two &lt;subjectdef> elements in an &lt;enumerationdef> are two lists of the "same" thing. You might have an organization with many applications developed by different teams. So you might have severallists of applications defined as &lt;subjectdef keys="apps1">&lt;topicmeta>&lt;navtitle>Team 1 apps&lt;/navtitle>&lt;/topicmeta>&lt;</subjectdef> and &lt;subjectdef keys="apps2">&lt;topicmeta>&lt;navtitle>Team 2 apps&lt;/navtitle>&lt;/topicmeta>&lt;</subjectdef> and &lt;subjectdef keys="apps3">&lt;topicmeta>&lt;navtitle>Team 3 apps&lt;/navtitle>&lt;/topicmeta>&lt;</subjectdef> . Propose leaving this out. If not, propose changing the sentence above to ... DITA processors should determine ...." JTH: Su-Laine believes this issue has not been addressed and is missing from DITA 1.3. See Eric's original proposal 12031. "The writer can then supply the mysql and troubleshooting keys in the otherprops attribute to indicate that the content pertains to both the MySQL database and the troubleshooting task: </draft-comment><draft-comment>&lt;task ...> ... &lt;note otherprops="mysql troubleshoot">Please check... is running.&lt;/note> ... &lt;/task></draft-comment></p></section>-->
        <example id="example-binding-values" otherprops="examples">
            <title>Example: Binding a list of controlled values to the <xmlatt>audience</xmlatt>
                attribute</title>
            <p>The following example illustrates the use of the <xmlelement>subjectdef</xmlelement>
                element to define controlled values for types of users. It also binds the controlled
                values to the <xmlatt>audience</xmlatt> attribute:</p>
            <codeblock>&lt;subjectScheme>
  &lt;!-- Define types of users -->
  &lt;subjectdef keys="users">
    &lt;subjectdef keys="therapist"/>
    &lt;subjectdef keys="oncologist"/>
    &lt;subjectdef keys="physicist"/>
    &lt;subjectdef keys="radiologist"/>
  &lt;/subjectdef>

  &lt;!-- Bind the "users" subject to the @audience attribute.
       This restricts the @audience attribute to the following
       values: therapist, oncologist, physicist, radiologist -->
  &lt;enumerationdef>
    &lt;attributedef name="audience"/>
    &lt;subjectdef keyref="users"/>
  &lt;/enumerationdef>
&lt;/subjectScheme></codeblock>
            <p >When the above subject scheme map is used, the only valid
                values for the <xmlatt>audience</xmlatt> attribute are "therapist", "oncologist",
                "physicist", and "radiologist". Note that "users" is not a valid value for the
                    <xmlatt>audience</xmlatt> attribute; it merely identifies the parent or
                container subject.</p>
        </example>
        <example  id="example-binding-empty-set" otherprops="examples">
            <title>Example: Binding an attribute to an empty set</title>
            <p>The following code fragment declares that there are no valid values for the
                    <xmlatt>outputclass</xmlatt> attribute.</p>
            <codeblock>&lt;subjectScheme>
  &lt;enumerationdef>
    &lt;attributedef name="outputclass"/>
    &lt;subjectdef/>
  &lt;/enumerationdef>
&lt;/subjectScheme></codeblock>
        </example>
    </conbody>
</concept>
