<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="general-coding-requirements" xml:lang="en-us">
  <title>DTD: Coding requirements for element type declarations</title>
  <shortdesc>This topic covers general coding requirements for defining element types in both
    structural and element-domain vocabulary modules.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>coding requirements<indexterm>DTDs<indexterm> element-domain
            modules</indexterm></indexterm></indexterm>
        <indexterm>DTDs<indexterm>coding requirements<indexterm> element-domain
            modules</indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <conbody>
    <section id="files">
      <title>Module files</title>
      <p>A vocabulary module that defines a structural or element domain specialization is composed
        of two files:</p>
      <ul>
        <li>A definition module (<filepath>.mod</filepath>) file, which declares the element names,
          content models, and attribute lists for the element types that are defined in the
          vocabulary module</li>
        <li>An entity declaration (<filepath>.ent</filepath>) file, which declares the text and
          parameter entities that are used to integrate the vocabulary module into a document-type
          shell</li>
      </ul>
    </section>
    <section id="element-definitions">
      <title>Element definitions</title>
      <p>A structural or element-domain vocabulary module contains a declaration for each element
        type that is named by the module. While the XML standard allows content models to refer to
        undeclared element types, the DITA standard does not permit this. All element types or
        attribute lists that are named within a vocabulary module are declared in one of the
        following objects:</p>
      <ul>
        <li>The vocabulary module</li>
        <li>A base module of which the vocabulary module is a direct or indirect specialization</li>
        <li>(If the vocabulary module is a structural module) A required domain module</li>
      </ul>
      <p>The following components make up a single element definition in a DITA DTD-based vocabulary
        module.</p>
      <dl>
        <dlentry>
          <dt>Element name entities</dt>
          <dd>
            <p>For each element type, there is a parameter entity with a name that matches the
              element type name. The default value is the element-type name. </p>
            <div otherprops="examples">
              <p>For example:</p>
              <codeblock>&lt;!ENTITY % topichead "topichead"></codeblock>
            </div>
            <p>The parameter entity provides a layer of abstraction when setting up content models;
              it can be redefined in a document-type shell in order to create domain extensions <ph
                rev="2.0">or implement element configuration (constraints and expansion).</ph></p>
            <p>Element name entities for a single vocabulary module are typically grouped together
              at the top of the vocabulary module. They can occur in any order.</p>
          </dd>
        </dlentry>
        <dlentry>
          <dt>Content-model parameter entity</dt>
          <dd>
            <p>For each element type, there is a parameter entity that defines the content model.
              The name of the parameter entity is
                <codeph><varname>tagname</varname>.content</codeph>, and the value is the content
              model definition.</p>
            <div otherprops="examples">
              <p>For example:</p>
              <codeblock>&lt;!ENTITY % topichead.content
  "((%topicmeta;)?, 
    (%anchor; | 
     %data.elements.incl; | 
     %navref; | 
     %topicref;)*)
"></codeblock>
            </div>
            <p>Consistent use and naming of the <codeph><varname>tagname</varname>.content</codeph>
              parameter entity enables the use of <ph rev="2.0">element-configuration modules
                (constraints and expansion) to redefine the content model.</ph></p>
          </dd>
        </dlentry>
        <dlentry>
          <dt>Attribute-list parameter entity</dt>
          <dd>
            <p>For each element type, there is a parameter entity that declares the attributes that
              are available on the element. The name of the parameter entity is
                  <codeph><varname>tagname</varname>.attributes</codeph>, and the value is a list of
              the attributes that are used by the element type (except for <xmlatt>class</xmlatt>).
              Consistent use and naming of the
                <codeph><varname>tagname</varname>.attributes</codeph> parameter entity enables the
              use of <ph rev="2.0">element-configuration modules (constraints and expansion) to
                redefine the attribute list.</ph></p>
            <div otherprops="examples">
              <p>For example:</p>
              <codeblock>&lt;!ENTITY % topichead.attributes
 "keys CDATA #IMPLIED
  copy-to CDATA #IMPLIED
  %topicref-atts;
  %univ-atts;"
></codeblock>
            </div>
          </dd>
        </dlentry>
        <dlentry>
          <dt>Element declaration</dt>
          <dd>
            <p>For each element type, there is an element declaration that consists of a reference
              to the content-model parameter entity.</p>
            <div otherprops="examples">
              <p>For example:</p>
              <codeblock>&lt;!ELEMENT topichead    %topichead.content;></codeblock>
            </div>
          </dd>
        </dlentry>
        <dlentry>
          <dt>Attribute list declaration</dt>
          <dd>
            <p>For each element type, there is an attribute list declaration that consists of a
              reference to the attribute-list parameter entity.</p>
            <div otherprops="examples">
              <p>For example:</p>
              <codeblock>&lt;!ATTLIST topichead    %topichead.attributes;></codeblock>
            </div>
          </dd>
        </dlentry>
        <dlentry>
          <dt>Specialization attribute declarations</dt>
          <dd>
            <p>A vocabulary module defines a <xmlatt>class</xmlatt> attribute for every element that
              is declared in the module. The value of the attribute is constructed according to the
              rules in <xref href="specialization-class-attribute.dita"/>.</p>
            <div otherprops="examples">
              <p>For example, the <codeph>ATTLIST</codeph> definition for the
                  <xmlelement>topichead</xmlelement> element (a specialization of the
                  <xmlelement>topicref</xmlelement> element in the base map type) includes the
                definition of the <xmlatt>class</xmlatt> attribute, as follows:</p>
              <codeblock>&lt;!ATTLIST topichead  class CDATA "+ map/topicref  mapgroup-d/topichead "&gt;</codeblock>
            </div>
          </dd>
        </dlentry>
      </dl>
    </section>
  </conbody>
</concept>

