<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="constraintsDomainDesignPattern-dtd" xml:lang="en-us" >
  <title>DTD: Coding requirements for constraint modules</title>
  <shortdesc>An element-type constraint module defines the constraints for a map or topic element
    type. A domain constraint module defines the constraints for an element or attribute
    domain.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>coding
          requirements<indexterm>DTDs<indexterm>constraints</indexterm></indexterm></indexterm>
        <indexterm>constraints<indexterm>DTDs<indexterm>coding
          requirements</indexterm></indexterm></indexterm>
        <indexterm>domain constraint modules<indexterm>DTDs<indexterm>coding
              requirements</indexterm></indexterm></indexterm>
        <indexterm>element-type constraint modules<indexterm>DTDs<indexterm>coding
              requirements</indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <conbody>
    <section id="structural">
      <title>Element-type constraint modules</title>
      <p>Element-type constraint modules have the following requirements:</p>
      <dl>
        <dlentry >
          <dt>The <codeph><varname>tagname</varname>.attributes</codeph> parameter entity</dt>
          <dd>
            <p>When the attribute set for an element is constrained, there must be a declaration of
              the <codeph><varname>tagname</varname>.attributes</codeph> parameter entity that
              defines the constrained attributes.</p>
            <p otherprops="examples">For example, the following parameter entity defines a
              constrained set of attributes for the <xmlelement>note</xmlelement> element that
              removes most of the values defined for <xmlatt>type</xmlatt>; it also removes
                <xmlatt>spectitle</xmlatt> and <xmlatt>othertype</xmlatt>:</p>
            <codeblock>&lt;!ENTITY % note.attributes  
       "type  (attention | caution | note ) #IMPLIED
        %univ-atts;"&gt;</codeblock>
          </dd>
        </dlentry>
        <dlentry>
          <dt>The <codeph><varname>tagname</varname>.content</codeph> parameter entity</dt>
          <dd>
            <p><ph>When the content model for an element is constrained,</ph> there must be a
              declaration of the <codeph><varname>tagname</varname>.content</codeph> parameter
              entity that defines the constrained content model.</p>
            <p otherprops="examples">For example, the following parameter entity defines a more
              restricted content model for <xmlelement>topic</xmlelement>, in which the
                <xmlelement>shortdesc</xmlelement> element is
              required.<codeblock>&lt;!ENTITY % topic.content 

  "((%title;), 
    (%titlealts;)?, 
    (%shortdesc;), 
    (%prolog;)?, 
    (%body;)?, 
    (%topic-info-types;)*)"
></codeblock></p>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="domain">
      <title>Domain constraint modules</title>
      <p>Domain constraint modules have the following requirements:</p>
      <dl>
        <dlentry>
          <dt>Parameter entity</dt>
          <dd>
            <p>When the set of extension elements are restricted, there must be a parameter entity
              that defines the constrained content model.</p>
            <p otherprops="examples" >For example, the following
              parameter entity restricts the highlighting domain to <xmlelement>b</xmlelement> and
                <xmlelement>i</xmlelement>:</p>
            <codeblock >
&lt;!ENTITY % HighlightingDomain-c-ph     "b | i"  ></codeblock>
          </dd>
        </dlentry>
      </dl>
    </section>
    <section id="remove-base-element">
      <title>Constraining to replace a base element with domain extensions</title>
      <p>When element domains are used to extend a base element, those extensions can be used to
        replace the base element. This form of constraint is done inside the document-type
        shell.</p>
      <p>Within a document-type shell, <xref
          href="dtd-coding-doctype-shell.dita#shell-dtd-coding-reqs/domain-extensions">domain
          extensions</xref> are implemented by declaring an entity for a base element. The value of
        the entity can omit any base element types from which the other element types that are
        listed are specialized.</p>
      <p otherprops="examples">In the following example, the <xmlelement>pre</xmlelement> base type
        is removed from the entity declaration, effectively allowing only specializations of
          <xmlelement>pre</xmlelement> but not <xmlelement>pre</xmlelement> itself.<codeblock otherprops="examples"><![CDATA[<!ENTITY % pre
    "%pr-d-pre; | 
     %sw-d-pre; | 
     %ui-d-pre;">]]></codeblock></p>
    </section>
  </conbody>
</concept>

