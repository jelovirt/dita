<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="shell-dtd-coding-reqs" xml:lang="en-us">
    <title>DTD: Coding requirements for document-type shells</title>
    <shortdesc>A DTD-based document-type shell is organized into sections; each section contains
        entity declarations that follow specific coding rules.</shortdesc>
    <prolog>
        <metadata>
            <keywords>
                <indexterm>coding requirements<indexterm>DTDs<indexterm>document-type
                            shells</indexterm></indexterm></indexterm>
                <indexterm>document-type shells<indexterm>DTDs<indexterm>sections, patterns
                            of</indexterm></indexterm></indexterm>
                <indexterm>document-type shells<indexterm>DTDs<indexterm>parameter
                            entities</indexterm></indexterm></indexterm>
                <indexterm>DTDs<indexterm>coding requirements<indexterm>document-type
                            shells</indexterm></indexterm></indexterm>
                <indexterm>DTDs<indexterm>parameter entities, use of</indexterm></indexterm>
                <indexterm>naming conventions<indexterm>document-type shells<indexterm>parameter
                            entities</indexterm></indexterm></indexterm>
            </keywords>
        </metadata>
    </prolog>
    <conbody>
        <p><ph product="DITA-1.3">The DTD-based approach to configuration, specialization, and
                constraints relies heavily upon parameter entities. </ph><ph product="DITA-2.0">The
                DTD-based approach to configuration, specialization, and element configuration
                (constraints and expansion) relies heavily upon parameter entities. </ph>Several of
            the parameter entities that are declared in document type shells contain references to
            other parameter entities. Because parameter entities must be declared before they are
            used, the order of the sections in a DTD-based document-type shell is significant.</p>
        <p>A DTD-based document-type shell contains the following sections:</p>
        <ol>
            <li>
                <xref href="#shell-dtd-coding-reqs/topic-map-entity-declarations" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/domain-constraint-integration" format="dita"
                /></li>
            <li><xref href="#shell-dtd-coding-reqs/domain-entity-declarations" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/domain-attributes-declarations" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/domain-extensions" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/domain-attribute-extensions" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/topic-nesting-overrides" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/domains-attribute-override" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/content-constraint-integration" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/topic-map-element-integration" format="dita"/>
            </li>
            <li>
                <xref href="#shell-dtd-coding-reqs/domain-element-integration" format="dita"/>
            </li>
        </ol>
        <p>Each of the sections in a DTD-based document-type shell follows a pattern. These patterns
            help ensure that the shell follows XML parsing rules for DTDs; they also establish a
            modular design that simplifies creation of new document-type shells. By convention, an
                <filepath>.ent</filepath> file extension is used to indicate files that define only
            parameter entities, while a <filepath>.mod</filepath> file extension is used to indicate
            files that define elements or <ph product="DITA-1.3">constraints</ph><ph>perform element
                configuration (constraints and expansion)</ph>.</p>
        <dl>
            <dlentry id="topic-map-entity-declarations">
                <dt> Topic [or map] entity declarations </dt>
                <dd>
                    <p>This section declares and references an external parameter entity for each of
                        the following items: </p>
                    <ul>
                        <li>The top-level topic or map type that the document-type shell
                            configures</li>
                        <li>Any additional structural modules that are used by the document type
                            shell</li>
                    </ul>
                    <p>The parameter entity is named
                            <codeph><varname>type-name</varname>-dec</codeph>. </p>
                    <p otherprops="examples">For example, a document-type shell that integrates the
                            <xmlelement>concept</xmlelement> specialization would
                        include:<codeblock>&lt;!ENTITY % concept-dec     
  PUBLIC "-//OASIS//ENTITIES DITA 2.0 Concept//EN" 
         "concept.ent"
>%concept-dec;</codeblock></p>
                </dd>
            </dlentry>
            <dlentry id="domain-constraint-integration">
                <dt>Domain constraint integration</dt>
                <dd>
                    <p>For each domain constraint module that is integrated into the document type
                        shell, this section declares a parameter entity and references the
                        constraint module file where the constraint is defined. The parameter entity
                        is named <codeph><varname>descriptorDomainName</varname>-c-dec</codeph>.</p>
                    <p otherprops="examples">In the following example, the entity file for a
                        constraint module that reduces the highlighting domain to a subset is
                        included in a document type
                        shell:<codeblock>&lt;!-- ============================================================= -->
&lt;!--                    DOMAIN CONSTRAINT INTEGRATION              -->
&lt;!-- ============================================================= -->

&lt;!ENTITY % HighlightingDomain-c-dec  
  PUBLIC "-//ACME//ENTITIES DITA Highlighting Domain Constraint//EN" 
  "acme-HighlightingDomainConstraint.mod"
>%basic-HighlightingDomain-c-dec;</codeblock></p>
                </dd>
            </dlentry>
            <dlentry id="domain-entity-declarations">
                <dt> Domain entity declarations </dt>
                <dd>
                    <p>For each element domain that is integrated into the document-type shell, this
                        section declares a parameter entity and references the external entities
                        file where the element domain is defined. The parameter entity is named
                                <codeph><varname>shortDomainName</varname>-dec</codeph>. </p>
                    <p otherprops="examples">In the following example, the entity file for the
                        highlighting domain is included in a document-type shell:<codeblock><![CDATA[<!ENTITY % hi-d-dec PUBLIC
    "-//OASIS//ENTITIES DITA 2.0 Highlight Domain//EN" 
    "highlightDomain.ent"
>%hi-d-dec;]]></codeblock></p>
                </dd>
            </dlentry>
            <dlentry id="domain-attributes-declarations">
                <dt> Domain attributes declarations </dt>
                <dd>
                    <p>For each attribute domain that is integrated into the document-type shell,
                        this section declares a parameter entity and references the external
                        entities file where the attribute domain is defined. The parameter entity is
                        named <codeph><varname>domainName</varname>-dec</codeph>.</p>
                    <p otherprops="examples">In the following example, the entity file for the
                            <xmlatt>deliveryTarget</xmlatt> attribute domain is included in a
                        document-type shell:<codeblock><![CDATA[<!ENTITY % deliveryTargetAtt-d-dec
  PUBLIC "-//OASIS//ENTITIES DITA 2.0 Delivery Target Attribute Domain//EN"
         "deliveryTargetAttDomain.ent"
>%deliveryTargetAtt-d-dec;]]></codeblock></p>
                </dd>
            </dlentry>
            <dlentry id="domain-extensions">
                <dt> Domain extensions </dt>
                <dd>
                    <p>For each element that is extended by one or more domains, this section
                        redefines the parameter entity for the element. These entities are used by
                        later modules to define content models; redefining the entity adds domain
                        specializations wherever the base element is allowed.</p>
                    <p otherprops="examples">In the following example, the entity for the
                            <xmlelement>pre</xmlelement> element is redefined to add specializations
                        from the programming, software, and user interface domains:<codeblock><![CDATA[<!ENTITY % pre
    "pre        | 
     %pr-d-pre; | 
     %sw-d-pre; | 
     %ui-d-pre;">]]></codeblock></p>
                </dd>
            </dlentry>
            <dlentry id="domain-attribute-extensions">
                <dt> Domain attribute extensions </dt>
                <dd>
                    <p>For each attribute domain that is integrated <ph rev="2.0">globally </ph>into
                        the document-type shell, this section redefines the parameter entities for
                        the attribute. It adds an extension to the parameter entity for the relevant
                        attribute.</p>
                    <p otherprops="examples">In the following example, the <xmlatt>props</xmlatt>
                        attribute is specialized to create the <xmlatt>new</xmlatt> and
                            <xmlatt>othernew</xmlatt> attributes, while the <xmlatt>base</xmlatt>
                        attribute is specialized to create <xmlatt>newfrombase</xmlatt> and
                            <xmlatt>othernewfrombase</xmlatt> attributes<ph rev="2.0">. The new
                            attributes are globally integrated into the document-type
                        shell.</ph><codeblock>&lt;!ENTITY % props-attribute-extensions
        "%newAtt-d-attribute; 
         %othernewAtt-d-attribute;"&gt;
&lt;!ENTITY % base-attribute-extensions
        "%newfrombaseAtt-d-attribute; 
         %othernewfrombaseAtt-d-attribute;"&gt;
</codeblock></p>
                </dd>
            </dlentry>
            <dlentry id="topic-nesting-overrides">
                <dt> Topic nesting override </dt>
                <dd>
                    <p>For each topic type that is integrated into the document-type shell, this
                        section specifies whether and how subtopics nest by redefining the
                                <codeph><varname>topictype</varname>-info-types</codeph> entity. The
                        definition is usually an "OR" list of the topic types that can be nested in
                        the parent topic type. Use the literal root-element name, not the
                        corresponding parameter entity. Topic nesting can be disallowed completely
                        by specifying the <xmlelement>no-topic-nesting</xmlelement> element.</p>
                    <p otherprops="examples">In the following example, the parameter entity
                        specifies that <xmlelement>concept</xmlelement> can nest any number of
                            <xmlelement>concept</xmlelement> or <xmlelement>myTopicType</xmlelement>
                        topics, in any
                        order:<codeblock><![CDATA[<!ENTITY % concept-info-types "concept | myTopicType">]]></codeblock></p>
                </dd>
            </dlentry>
            <dlentry id="domains-attribute-override">
                <dt> Specializations attribute override </dt>
                <dd>
                    <p>This section sets the effective value of the <xmlatt>specializations</xmlatt>
                        attribute for the top-level document type that is configured by the document
                        type shell. It redefines the <codeph>included-domains</codeph> entity to
                        include the text entity for each attribute domain that is either included or
                        reused in the document-type shell.</p>
                    <p otherprops="examples">In the following example, entities are included for
                        both the <codeph>newAtt-d</codeph> and <codeph>deliveryTarget-d</codeph>
                        attribute domains:<codeblock><![CDATA[<!ENTITY included-domains
    "&deliveryTarget-d-att;
     &newAtt-d-att;
   "
>]]></codeblock></p>
                </dd>
            </dlentry>
            <dlentry id="content-constraint-integration">
                <dt>Element-type configuration integration</dt>
                <dd>
                    <p><ph rev="2.0">For each element-configuration module (constraint and
                            expansion) that is integrated into the document-type shell, this section
                            declares and references the external module file where the element
                            configuration is defined.</ph> The parameter entity is named
                                <codeph><varname>elementConfigName</varname>-c-def</codeph>.</p>
                    <p otherprops="examples">In the following example, the constraint module that
                        constrains the content model for the <xmlelement>taskbody</xmlelement>
                        element is integrated into the document-type shell for strict
                        task:<codeblock>&lt;!ENTITY % strictTaskbody-c-def  
  PUBLIC "-//OASIS//ELEMENTS DITA 2.0 Strict Taskbody Constraint//EN" 
  "strictTaskbodyConstraint.mod"
>%strictTaskbody-c-def;</codeblock></p>
                </dd>
            </dlentry>
            <dlentry id="topic-map-element-integration">
                <dt> Topic [or map] element integration </dt>
                <dd>
                    <p>For each structural module that is integrated into the document-type shell,
                        this section declares a parameter entity and references the external module
                        file where the structural module is defined. The parameter entity is named
                                <codeph><varname>structuralType</varname>-type</codeph>. The modules
                        need to be included in ancestry order, so that the parameter entities that
                        are used in an ancestor module are available for use in specializations.
                        When a structural module depends on elements from a vocabulary module that
                        is not part of its ancestry, the module upon which the structural module has
                        a dependency (and any ancestor modules not already included) need to be
                        included before the module with a dependency.</p>
                    <p otherprops="examples">The following example declares and references the
                        structural modules that are integrated into the document-type shell for
                        troubleshooting:<codeblock>&lt;!ENTITY % topic-type
  PUBLIC "-//OASIS//ELEMENTS DITA 2.0 Topic//EN"
         "../../base/dtd/topic.mod"
>%topic-type;

&lt;!ENTITY % task-type
  PUBLIC "-//OASIS//ELEMENTS DITA 2.0 Task//EN"
         "task.mod"
>%task-type;

&lt;!ENTITY % troubleshooting-type
  PUBLIC "-//OASIS//ELEMENTS DITA 2.0 Troubleshooting//EN"
         "troubleshooting.mod"
>%troubleshooting-type;</codeblock></p>
                </dd>
            </dlentry>
            <dlentry id="domain-element-integration">
                <dt> Domain element integration </dt>
                <dd>
                    <p>For each element domain that is integrated into the document-type shell, this
                        section declares a parameter entity and references the external module file
                        where the element domain is defined. The parameter entity is named
                                <codeph><varname>domainName</varname>-def</codeph>.</p>
                    <p otherprops="examples">For example, the following code declares and references
                        the parameter entity used for the highlighting domain:<codeblock><![CDATA[<!ENTITY % hi-d-def PUBLIC
    "-//OASIS//ELEMENTS DITA 2.0 Highlight Domain//EN" 
    "highlightDomain.mod"
>%hi-d-def;]]></codeblock></p>
                    <note>If a structural module depends on a domain, the domain module needs to be
                        included before the structural module. This erases the boundary between the
                        final two sections, but it is necessary to ensure that modules are embedded
                        after their dependencies. Technically, the only solid requirement is that
                        both domain and structural modules be declared after all other modules that
                        they specialize from or depend on.</note>
                </dd>
            </dlentry>
        </dl>
    </conbody>
</concept>
