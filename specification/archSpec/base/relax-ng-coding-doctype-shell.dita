<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept xml:lang="en-us" id="concept_rrq_p45_dn" >
  <title>RELAX NG: Coding requirements for document-type shells</title>
  <shortdesc>A RNG-based document-type shell is organized into sections; each section follows a
    pattern. These patterns help ensure that the shell follows XML parsing rules for RELAX NG; they
    also establish a modular design that simplifies creation of new document-type
    shells.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>coding requirements<indexterm>RNG<indexterm>document-type
            shells</indexterm></indexterm></indexterm>
        <indexterm>document-type shells<indexterm>RNG<indexterm>sections, patterns
            of</indexterm></indexterm></indexterm>
        <indexterm>RNG<indexterm>coding requirements<indexterm>document-type
            shells</indexterm></indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <conbody>
    <p>Because RELAX NG modules are self-integrating, RNG-based document-type shells only need to
      include vocabulary modules<ph rev="2.0"> and element-configuration modules (constraints and
        expansion)</ph>.</p>
    <p>An RNG-based document-type shell contains the following sections:</p>
    <ol>
      <li><xref href="#./root-element-declarations" format="dita"/></li>
      <li><xref href="#./specializations-attribute" format="dita"/></li>
      <li><xref href="#./content-constraint" format="dita"/></li>
      <li><xref href="#./module-inclusion" format="dita"/></li>
      <li><xref href="#./id-defining-element-overrides" format="dita"/></li>
    </ol>
    <dl>
      <dlentry id="root-element-declarations">
        <dt>Root element declaration</dt>
        <dd>
          <p>Document-type shells use the RELAX NG start declaration to specify the root element of
            the document type. The <xmlelement>start</xmlelement> element defines the root element,
            using a reference to a <codeph><varname>tagname</varname>.element</codeph> pattern.</p>
          <p otherprops="examples">For example:<codeblock>&lt;div>
  &lt;a:documentation>ROOT ELEMENT DECLARATION&lt;/a:documentation>
  &lt;start combine="choice">
    &lt;ref name="topic.element"/>
  &lt;/start>
&lt;/div></codeblock></p>
        </dd>
      </dlentry>
      <dlentry id="specializations-attribute">
        <dt><xmlatt>specializations</xmlatt> attribute</dt>
        <dd>
          <!--<p>The document-type shell must list the attribute domain modules that are named as dependencies in the <xmlatt>specializations</xmlatt> attribute value. Unlike DTDs, a default value for <xmlatt>specializations</xmlatt> cannot automatically be constructed using RELAX NG facilities. Instead, the values used to construct <xmlatt>specializations</xmlatt> are taken from each attribute module.</p>
-->
          <p>This section lists the tokens that attribute-domain <ph rev="2.0">and
              element-configuration</ph> modules contribute to the <xmlatt>specialization</xmlatt>
            attribute.</p>
          <p otherprops="examples">For example:<codeblock>&lt;div>
  &lt;a:documentation>SPECIALIZATIONS ATTRIBUTE&lt;/a:documentation>
  &lt;define name="specializations-att">
    &lt;optional>
      &lt;attribute name="specializations"
                 a:defaultValue="@props/audience
                                 @props/deliveryTarget                                 
                                 @props/otherprops
                                 @props/platform
                                 @props/product"
      />
    &lt;/optional>
  &lt;/define>
&lt;/div></codeblock></p>
        </dd>
      </dlentry>
      <dlentry id="content-constraint">
        <dt rev="2.0">Element-type configuration integration</dt>
        <dd>
          <p>This section of the document-type shell contains includes for <ph rev="2.0"
              >element-type configuration modules (constraints and expansions)</ph>.
            <!--Constraint modules include the module they override and override the patterns that they constrain directly in the constraint module itself.-->
            Because the element-configuration module imports the module that it override, any module
            that is<ph rev="2.0"> configured</ph> in this section (including the base topic or map
            modules) is left out of the following "Module inclusion" section.</p>
          <div otherprops="examples" rev="2.0">
            <p>For example, the following code sample shows the section of an RNG-based
              document-type shell that redefines the <xmlelement>taskbody</xmlelement> element to
              create the strict task topic.</p>
            <codeblock>&lt;div>
&lt;a:documentation>ELEMENT-TYPE CONFIGURATION INTEGRATION&lt;/a:documentation>
  &lt;include href="strictTaskbodyConstraintMod.rng">
    &lt;define name="task-info-types">
      &lt;ref name="task.element"/>
    &lt;/define>            
  &lt;/include>
&lt;/div></codeblock>
          </div>
        </dd>
      </dlentry>
      <dlentry id="module-inclusion">
        <dt>Module inclusions</dt>
        <dd>
          <p>This section of the RNG-based document-type shell includes all unconstrained domain or
            structural modules.</p>
          <p otherprops="examples">For example:<codeblock>  &lt;div>
    &lt;a:documentation>MODULE INCLUSIONS&lt;/a:documentation>
    &lt;include href="topicMod.rng">
      &lt;define name="topic-info-types">
        &lt;ref name="topic.element"/>
      &lt;/define>
    &lt;/include>
    &lt;include href="audienceAttDomain.rng" dita:since="2.0"/>
    &lt;include href="deliveryTargetAttDomain.rng"/>
    &lt;include href="otherpropsAttDomain.rng" dita:since="2.0"/>
    &lt;include href="platformAttDomain.rng" dita:since="2.0"/>
    &lt;include href="productAttDomain.rng" dita:since="2.0"/>
    &lt;include href="alternativeTitlesDomain.rng" dita:since="2.0"/>
    &lt;include href="emphasisDomain.rng" dita:since="2.0"/>
    &lt;include href="hazardstatementDomain.rng"/>
    &lt;include href="highlightDomain.rng"/>
    &lt;include href="utilitiesDomain.rng"/>
  &lt;/div></codeblock></p>
        </dd>
      </dlentry>
      <dlentry id="id-defining-element-overrides">
        <dt>ID-defining element overrides</dt>
        <dd>
          <p>This section declares any element in the document type that uses an <xmlatt>id</xmlatt>
            attribute with an XML data type of <keyword>ID</keyword>. This declaration is required
            in order to prevent RELAX NG parsers from issuing errors.</p>
          <p>If the document-type shell includes domains for foreign vocabularies such as SVG or
            MathML, this section also includes exclusions for the namespaces used by those
            domains.</p>
          <div otherprops="examples">
            <p>For example, the following code sample is from an RNG-based document-type shell for a
              task topic. It declares that both the <xmlelement>topic</xmlelement> and
                <xmlelement>task</xmlelement> elements have an <xmlatt>id</xmlatt> attribute with a
              XML data type of ID. These elements and any elements in the SVG or MathML namespaces
              are excluded from the "any" pattern by being placed within the
                <xmlelement>except</xmlelement> element:<codeblock>  &lt;div&gt;
      &lt;a:documentation&gt; ID-DEFINING-ELEMENT OVERRIDES &lt;/a:documentation&gt;
      &lt;define name="any"&gt;
         &lt;zeroOrMore&gt;
            &lt;choice&gt;
               &lt;ref name="idElements"/&gt;
               &lt;element&gt;
                  &lt;anyName&gt;
                     &lt;except&gt;
                        &lt;name&gt;topic&lt;/name&gt;
                        &lt;name&gt;task&lt;/name&gt;
                        &lt;nsName ns="http://www.w3.org/2000/svg"/&gt;
                        &lt;nsName ns="http://www.w3.org/1998/Math/MathML"/&gt;
                     &lt;/except&gt;
                  &lt;/anyName&gt;
                  &lt;zeroOrMore&gt;
                     &lt;attribute&gt;
                        &lt;anyName/&gt;
                     &lt;/attribute&gt;
                  &lt;/zeroOrMore&gt;
                  &lt;ref name="any"/&gt;
               &lt;/element&gt;
               &lt;text/&gt;
            &lt;/choice&gt;
         &lt;/zeroOrMore&gt;
      &lt;/define&gt;
  &lt;/div&gt;
</codeblock></p>
          </div>
        </dd>
      </dlentry>
      <!--<dlentry id="constrain-domains-in-shell"><dt>Constraining domains in the shell</dt><dd><p>Domains can be constrained to disallow some extension elements without the use of a separate module file. This is done by overriding the base type pattern within the reference to the domain module. There is not a designated section of the document-type shell for this type of constraint; it can be placed either in <xref href="#concept_rrq_p45_dn/content-constraint" format="dita"/> or <xref href="#concept_rrq_p45_dn/module-inclusion" format="dita"/>.</p><p otherprops="examples">The following example demonstrates the portion of a document type shell that includes the highlight domain module while directly constraining that module to remove the <xmlelement>u</xmlelement> element.</p><codeblock otherprops="examples">
  &lt;div>
    &lt;a:documentation>MODULE INCLUSIONS&lt;/a:documentation>
    &lt;include href="topicMod.rng"/>
    &lt;include href="hazardstatementDomainMod.rng"/>
    &lt;include href="highlightDomainMod.rng">
      &lt;define name="u">
        &lt;notAllowed>&lt;/notAllowed>
      &lt;/define>
    &lt;/include>
    &lt;include href="indexingDomainMod.rng"/>
    &lt;include href="utilitiesDomainMod.rng"/>
  &lt;/div>
</codeblock></dd></dlentry>-->
    </dl>
  </conbody>
</concept>
